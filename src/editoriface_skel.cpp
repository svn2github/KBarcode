/****************************************************************************
**
** DCOP Skeleton generated by dcopidl2cpp from editoriface.kidl
**
** WARNING! All changes made in this file will be lost!
**
*****************************************************************************/

#include "/home/dominik/Desktop/Programming/kbarcode/kbarcode/editoriface.h"

#include <kdatastream.h>
#include <q3asciidict.h>
//Added by qt3to4:
#include <Q3CString>


static const int EditorIface_fhash = 19;
static const char* const EditorIface_ftable[18][3] = {
    { "QString", "fileName()", "fileName()" },
    { "bool", "isChanged()", "isChanged()" },
    { "void", "print()", "print()" },
    { "bool", "newLabel()", "newLabel()" },
    { "void", "insertBarcode()", "insertBarcode()" },
    { "void", "insertPicture()", "insertPicture()" },
    { "void", "insertText()", "insertText()" },
    { "void", "insertRect()", "insertRect()" },
    { "void", "insertCircle()", "insertCircle()" },
    { "void", "insertLine()", "insertLine()" },
    { "void", "changeDes()", "changeDes()" },
    { "void", "changeSize()", "changeSize()" },
    { "void", "preview()", "preview()" },
    { "void", "toggleGrid()", "toggleGrid()" },
    { "void", "closeLabel()", "closeLabel()" },
    { "bool", "openUrl(QString)", "openUrl(QString url)" },
    { "bool", "save(QString)", "save(QString url)" },
    { 0, 0, 0 }
};
static const int EditorIface_ftable_hiddens[17] = {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};

bool EditorIface::process(const Q3CString &fun, const QByteArray &data, Q3CString& replyType, QByteArray &replyData)
{
    static Q3AsciiDict<int>* fdict = 0;
    if ( !fdict ) {
	fdict = new Q3AsciiDict<int>( EditorIface_fhash, true, false );
	for ( int i = 0; EditorIface_ftable[i][1]; i++ )
	    fdict->insert( EditorIface_ftable[i][1],  new int( i ) );
    }
    int* fp = fdict->find( fun );
    switch ( fp?*fp:-1) {
    case 0: { // QString fileName()
	replyType = EditorIface_ftable[0][0]; 
	QDataStream _replyStream( replyData, QIODevice::WriteOnly );
	_replyStream << fileName( );
    } break;
    case 1: { // bool isChanged()
	replyType = EditorIface_ftable[1][0]; 
	QDataStream _replyStream( replyData, QIODevice::WriteOnly );
	_replyStream << isChanged( );
    } break;
    case 2: { // void print()
	replyType = EditorIface_ftable[2][0]; 
	print( );
    } break;
    case 3: { // bool newLabel()
	replyType = EditorIface_ftable[3][0]; 
	QDataStream _replyStream( replyData, QIODevice::WriteOnly );
	_replyStream << newLabel( );
    } break;
    case 4: { // void insertBarcode()
	replyType = EditorIface_ftable[4][0]; 
	insertBarcode( );
    } break;
    case 5: { // void insertPicture()
	replyType = EditorIface_ftable[5][0]; 
	insertPicture( );
    } break;
    case 6: { // void insertText()
	replyType = EditorIface_ftable[6][0]; 
	insertText( );
    } break;
    case 7: { // void insertRect()
	replyType = EditorIface_ftable[7][0]; 
	insertRect( );
    } break;
    case 8: { // void insertCircle()
	replyType = EditorIface_ftable[8][0]; 
	insertCircle( );
    } break;
    case 9: { // void insertLine()
	replyType = EditorIface_ftable[9][0]; 
	insertLine( );
    } break;
    case 10: { // void changeDes()
	replyType = EditorIface_ftable[10][0]; 
	changeDes( );
    } break;
    case 11: { // void changeSize()
	replyType = EditorIface_ftable[11][0]; 
	changeSize( );
    } break;
    case 12: { // void preview()
	replyType = EditorIface_ftable[12][0]; 
	preview( );
    } break;
    case 13: { // void toggleGrid()
	replyType = EditorIface_ftable[13][0]; 
	toggleGrid( );
    } break;
    case 14: { // void closeLabel()
	replyType = EditorIface_ftable[14][0]; 
	closeLabel( );
    } break;
    case 15: { // bool openUrl(QString)
	QString arg0;
	QDataStream arg( data, QIODevice::ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EditorIface_ftable[15][0]; 
	QDataStream _replyStream( replyData, QIODevice::WriteOnly );
	_replyStream << openUrl(arg0 );
    } break;
    case 16: { // bool save(QString)
	QString arg0;
	QDataStream arg( data, QIODevice::ReadOnly );
	if (arg.atEnd()) return false;
	arg >> arg0;
	replyType = EditorIface_ftable[16][0]; 
	QDataStream _replyStream( replyData, QIODevice::WriteOnly );
	_replyStream << save(arg0 );
    } break;
    default: 
	return DCOPObject::process( fun, data, replyType, replyData );
    }
    return true;
}

QCStringList EditorIface::interfaces()
{
    QCStringList ifaces = DCOPObject::interfaces();
    ifaces += "EditorIface";
    return ifaces;
}

QCStringList EditorIface::functions()
{
    QCStringList funcs = DCOPObject::functions();
    for ( int i = 0; EditorIface_ftable[i][2]; i++ ) {
	if (EditorIface_ftable_hiddens[i])
	    continue;
	Q3CString func = EditorIface_ftable[i][0];
	func += ' ';
	func += EditorIface_ftable[i][2];
	funcs << func;
    }
    return funcs;
}


